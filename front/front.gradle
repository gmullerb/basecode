//  Copyright (c) 2018 Gonzalo MÃ¼ller Bravo.
//  Licensed under the MIT License (MIT), see LICENSE.txt

plugins {
  id 'all.shared.gradle.code-common-tasks' version '1.0.0'
  id 'com.moowork.node' version '1.2.0'
}

description = 'Frontend code.'
group = 'Code'

// CONSTANTS
////////////

final SOURCE_DIR = "$projectDir/src"
final MAIN_DIR = "$SOURCE_DIR/main"
final TEST_DIR = "$projectDir/test"
final REPORTS_DIR = "$buildDir/reports"
final TESTS_REPORT_DIR = "$REPORTS_DIR/tests"
final COVERAGE_REPORT_DIR = "$REPORTS_DIR/coverage"

final INCREMENTAL_MAIN_CONFIGURATION = {
  inputs.dir MAIN_DIR
}

final INCREMENTAL_LINT_CONFIGURATION = {
  inputs.files fileLister.obtainFullFileTree("$projectDir", [includes: [FRONT$ESLINT_CFG_FILE]])
}

final NO_OUTPUTS_CONFIGURATION = {
  outputs.upToDateWhen { true }
}

final INCREMENTAL_COMMON_TEST_CONFIGURATION = {
  inputs.file 'config/test/common-test.cfg.js'
} << NO_OUTPUTS_CONFIGURATION

final INCREMENTAL_UNIT_TEST_CONFIGURATION = {
  inputs.dir "$TEST_DIR/unit"
  inputs.file 'config/test/unit-test.cfg.js'
} << INCREMENTAL_COMMON_TEST_CONFIGURATION

final INCREMENTAL_INTEGRATION_TEST_CONFIGURATION = {
  inputs.file 'config/test/integration/integration-test.cfg.js'
  inputs.file 'config/test/integration/jasmine.cfg.js'
  inputs.dir "$TEST_DIR/integration"
} << INCREMENTAL_COMMON_TEST_CONFIGURATION

final INCREMENTAL_TEST_LINT_CONFIGURATION = {
  inputs.files fileLister.obtainFullFileTree("$projectDir/$TEST_DIR", [includes: [FRONT$ESLINT_CFG_FILE]])
} << INCREMENTAL_LINT_CONFIGURATION

ext {
  webDir = "$buildDir/web"
  npmTaskConfiguration = {
    // NpmTask task settings
    args = ['run'] + args + (logger.debugEnabled
      ? ['--loglevel', 'silly']
      : ['--silent'])
    // gradle task settings
    dependsOn npmInstall
    inputs.file file('package.json')
    doFirst  {
      logger.debug "$it.name command: ${args.join ' '}"
    }
  }
  eslintTaskConfiguration = {
    // NpmTask task settings
    args += [baseStyleConfig.front.eslintNpmConfigArg]
  } << npmTaskConfiguration
  mainNpmTaskConfiguration = npmTaskConfiguration << INCREMENTAL_MAIN_CONFIGURATION
  eslintMainNpmTaskConfiguration = eslintTaskConfiguration << INCREMENTAL_MAIN_CONFIGURATION
}

// Plugin settings
//////////////////

node {
  version = FRONT$NODE_VERSION
  download = true
}

// TASKS
////////

// Assessment
/////////////

task assessMain(type: NpmTask) {
  // NpmTask task settings
  args = ['eslintMain']
  // gradle task settings
  inputs.files fileLister.obtainFullFileTree("$projectDir/$MAIN_DIR", [includes: [FRONT$ESLINT_CFG_FILE]])
}
assessMain eslintMainNpmTaskConfiguration << INCREMENTAL_TEST_LINT_CONFIGURATION << NO_OUTPUTS_CONFIGURATION

task assessUnitTest(type: NpmTask) {
  args = ['eslintUT']
}
assessUnitTest eslintTaskConfiguration << INCREMENTAL_TEST_LINT_CONFIGURATION << INCREMENTAL_UNIT_TEST_CONFIGURATION

task assessIntegrationTest(type: NpmTask) {
  args = ['eslintIT']
}
assessIntegrationTest eslintTaskConfiguration << INCREMENTAL_TEST_LINT_CONFIGURATION << INCREMENTAL_INTEGRATION_TEST_CONFIGURATION

task assessTest(type: NpmTask) {
  args = ['eslintTest']
}
assessTest eslintMainNpmTaskConfiguration << INCREMENTAL_TEST_LINT_CONFIGURATION <<
  INCREMENTAL_UNIT_TEST_CONFIGURATION << INCREMENTAL_INTEGRATION_TEST_CONFIGURATION << NO_OUTPUTS_CONFIGURATION

task assessCss(type: NpmTask) {
  // NpmTask task settings
  args = ['stylelint', baseStyleConfig.front.stylelintNpmConfigArg]
  // gradle task settings
  description = 'Analyze and assess CSS files.'
  group = codeCommonTasks.groupForAssessTasks
  shouldRunAfter assessMain
  inputs.file '.stylelintrc.json'
  inputs.files fileLister.obtainFullFileTree("$projectDir/$SOURCE_DIR", [includes: ['*.css']])
}
assessCss mainNpmTaskConfiguration << NO_OUTPUTS_CONFIGURATION

task assessLocal(type: NpmTask) {
  // NpmTask task settings
  args = ['eslintLocal']
  // gradle task settings
  description = 'Analyze and assess Local code'
  group = codeCommonTasks.groupForAssessTasks
  inputs.file FRONT$ESLINT_CFG_FILE
  inputs.files fileLister.obtainFullFileTree("$projectDir/local_js", [includes: [FRONT$CODE_FILES, FRONT$ESLINT_CFG_FILE]])
  inputs.files fileLister.obtainFullFileTree("$projectDir/local_modules", [includes: [FRONT$CODE_FILES, FRONT$ESLINT_CFG_FILE]])
}
assessLocal eslintTaskConfiguration << NO_OUTPUTS_CONFIGURATION

task assess {
  dependsOn assessCss, assessLocal
}

// Tests
////////

task unitTest(type: NpmTask) {
  // Code task settings
  ext.reportAt = "$TESTS_REPORT_DIR/unitTest"
  ext.coverageReportAt = COVERAGE_REPORT_DIR
  // NpmTask task settings
  args = ['unitTest'
    , "--front_src_dir=$SOURCE_DIR"
    , "--front_test_report_dir=$reportAt"
    , "--front_coverage_report_dir=$coverageReportAt"]
  // gradle task settings
  outputs.dir reportAt
  outputs.dir coverageReportAt
}
unitTest mainNpmTaskConfiguration << INCREMENTAL_UNIT_TEST_CONFIGURATION

task integrationTest(type: NpmTask) {
  // Code task settings
  ext.reportAt = "$TESTS_REPORT_DIR/integrationTest"
  // NpmTask task settings
  args = ['integrationTest'
    , "--front_src_dir=$SOURCE_DIR"
    , "--front_test_report_dir=$reportAt"]
  // gradle task settings
  outputs.dir reportAt
}
integrationTest mainNpmTaskConfiguration << INCREMENTAL_INTEGRATION_TEST_CONFIGURATION

// Build
////////

task assembleJs(type: NpmTask) {
  // NpmTask task settings
  args = ['jsbuild',
          "--front_src=$MAIN_DIR",
          "--front_dest=$webDir/META-INF/resources",
          "--front_env=$runningEnvironment"]
  // gradle task settings
  description = 'Assembles web static resources.'
  group = codeCommonTasks.groupForBuildTasks
  inputs.file 'local_js/build.js'
  outputs.dir webDir
}
assembleJs mainNpmTaskConfiguration

task assemble(type: Jar) {
  // jar task settings
  baseName = FRONT$ARCHIVE_NAME
  version = FRONT$VERSION
  from webDir
  destinationDir = file("$buildDir/libs")
  // gradle task settings
  description = 'Assembles a JAR archive containing the web static resources.'
  dependsOn 'assembleJs'
}

// Documentation
////////////////

task doc(type: NpmTask) {
  // NpmTask task settings
  args = ['jsdoc']
  // gradle task settings
  ext.documentationType = 'jsDoc'
  ext.documentationAt = "$buildDir/docs"
  inputs.file 'config/jsdoc.cfg.json'
  outputs.dir documentationAt
}
