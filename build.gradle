//  Copyright (c) 2018 Gonzalo MÃ¼ller Bravo.
//  Licensed under the MIT License (MIT), see LICENSE.txt

plugins {
  id 'checkstyle'
  id 'codenarc'
}

final LOCAL_REPO = project.hasProperty('localRepo')
final TARGET_REPOSITORY = { LOCAL_REPO ? mavenLocal() : jcenter() }
logger.info "Gradle Repository: ${LOCAL_REPO ? 'local' : 'remote'} (change it to local with -PlocalRepo)"

ext.runningEnvironment = project.hasProperty('env') ? project.env.toLowerCase() : GLOBAL$DEFAULT_ENVIRONMENT
logger.quiet "Enviroment: $runningEnvironment (change it with -Penv=TARGET_ENVIRONMENT)"

allprojects {
  buildscript {
    repositories TARGET_REPOSITORY
  }

  repositories {
    maven {
      url 'https://dl.bintray.com/gmullerb/all.shared.config.style'
    }
  }

  repositories TARGET_REPOSITORY

  configurations {
    styleConfig
  }

  dependencies {
    styleConfig "all.shared.config:base-style-config:${GLOBAL$BASE_STYLE_CONFIG_VERSION}"
  }
}

ext.localGradleModuleFolder = "$rootDir/local_gradle"

apply from: 'local_gradle/logger.gradle'
apply from: 'local_gradle/extra.gradle'
apply from: 'local_gradle/files.gradle'

final allFilesInTree = obtainAllFilesInTree()

// Plugin settings
//////////////////

checkstyle {
  toolVersion = "${GLOBAL$CHECKSTYLE_VERSION}"
  config = resources.text.fromArchiveEntry(configurations.styleConfig, 'common/common-checks.xml')
}

codenarc {
  toolVersion = "${GLOBAL$CODENARC_VERSION}"
  config = resources.text.fromArchiveEntry(configurations.styleConfig, 'gradle/gradle-rules.groovy')
}

// TASKS
////////

task assessCommon (type: Checkstyle) {
  // Checkstyle task settings
  classpath = files('dummy') // Required by Checkstyle, Not required for Checker modules
  source allFilesInTree
  // gradle task settings
  description = 'Run Common Checkstyle analysis for all files.'
  group = CODE$GROUP_ASSESS
}

task assessGradle(type: CodeNarc) {
  // CodeNarc task settings
  source allFilesInTree.filter { it.name.matches('.*\\.gradle') }
  reports.text.enabled = true
  // gradle task settings
  description = 'Run Codenarc analysis for all gradle files.'
  group = 'Gradle assessment'
  finalizedBy 'reportGradle'
}

// Default task
///////////////

defaultTasks 'assessGradle', 'assessCommon', 'check'
